// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Variants variants
//
// swagger:model variants
type Variants struct {

	// barcode
	Barcode string `json:"barcode,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// option1
	Option1 string `json:"option1,omitempty"`

	// option2
	Option2 string `json:"option2,omitempty"`

	// option3
	Option3 string `json:"option3,omitempty"`

	// product id
	// Read Only: true
	ProductID int64 `json:"product_id,omitempty"`

	// sku
	// Required: true
	// Min Length: 1
	Sku *string `json:"sku"`
}

// Validate validates this variants
func (m *Variants) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSku(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Variants) validateSku(formats strfmt.Registry) error {

	if err := validate.Required("sku", "body", m.Sku); err != nil {
		return err
	}

	if err := validate.MinLength("sku", "body", *m.Sku, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this variants based on the context it is used
func (m *Variants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Variants) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Variants) contextValidateProductID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "product_id", "body", int64(m.ProductID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Variants) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Variants) UnmarshalBinary(b []byte) error {
	var res Variants
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
